package JavaGUI;

import java.net.URL;
import java.util.ArrayList;
import java.util.ResourceBundle;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.MenuItem;
import javafx.scene.control.Spinner;
import javafx.scene.control.SpinnerValueFactory;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.stage.WindowEvent;

/*
    This class is the controller class in our MVC programming pattern. It contains
    variables with references to all of the UI components from the View as well as
    event handlers for the both the menuItems and buttons used in the gui interface.
    It also maintains a reference to the Model, maxdb, establishing the 
    MVC pattern.
*/


public class FXML_WeightTrainingController implements Initializable {
    
    private MaxDatabase maxdb = new MaxDatabase();  // Model
    
    private boolean modified = false;   // tracks whether database needs to be saved
    private ObservableList <Player> tableData;  // stores data that is viewed in the TableView component
    private ChangeListener<String> listener2;   // listener for Edit Panel
    private ChangeListener<String> listener3;   // listener for Delete Panel
    private ChangeListener<String> listener4;   // listener for Filer Panel
    private ChangeListener<Integer> spinner_listener;  // listener for Spinner located in Group Panel;
    private ChangeListener<String> group_listener;     // listener for Group Panel
    private ArrayList<Group> groups;                   // list of groups
    private ArrayList<Player> filteredTeamList;        // list of players filtered by Team
    
    // View - generated by Scene Builder
    @FXML
    private MenuItem new_menu;
    @FXML
    private MenuItem save_menu;
    @FXML
    private MenuItem closeout_menu;
    @FXML
    private MenuItem exit_menu;
    @FXML
    private MenuItem addPlayer_menu;
    @FXML
    private MenuItem editPlayer_menu;
    @FXML
    private MenuItem deletePlayer_menu;
    @FXML
    private MenuItem filterPlayers_menu;
    @FXML
    private MenuItem autoGenerateGroups_menu;
    @FXML
    private TableView<Player> player_table;
    @FXML
    private TableColumn<Player, String> lastName_col;
    @FXML
    private TableColumn<Player, String> firstName_col;
    @FXML
    private TableColumn<Player, String> team_col;
    @FXML
    private TableColumn<Player, String> class_col;
    @FXML
    private TableColumn<Player, Integer> bench_col;
    @FXML
    private TableColumn<Player, Integer> squat_col;
    @FXML
    private TableColumn<Player, Integer> incline_col;
    @FXML
    private TableColumn<Player, Integer> power_col;
    @FXML
    private TextField firstName_field1;
    @FXML
    private TextField lastName_field1;
    @FXML
    private ComboBox<String> team_combo1;
    @FXML
    private ComboBox<String> class_combo1;
    @FXML
    private TextField bench_field1;
    @FXML
    private TextField squat_field1;
    @FXML
    private TextField incline_field1;
    @FXML
    private TextField power_field1;
    @FXML
    private VBox addPlayer_vbox;
    @FXML
    private Button playerAdd_button;
    @FXML
    private VBox editPlayer_vbox;
    @FXML
    private TextField firstName_field2;
    @FXML
    private TextField lastName_field2;
    @FXML
    private ComboBox<String> team_combo2;
    @FXML
    private ComboBox<String> class_combo2;
    @FXML
    private TextField bench_field2;
    @FXML
    private TextField squat_field2;
    @FXML
    private TextField incline_field2;
    @FXML
    private TextField power_field2;
    @FXML
    private Button clear_button1;
    @FXML
    private Button clear_button2;
    @FXML
    private Button update_button;
    @FXML
    private VBox deletePlayer_vbox;
    @FXML
    private TextField firstName_field3;
    @FXML
    private TextField lastName_field3;
    @FXML
    private ComboBox<String> team_combo3;
    @FXML
    private ComboBox<String> class_combo3;
    @FXML
    private TextField bench_field3;
    @FXML
    private TextField squat_field3;
    @FXML
    private TextField incline_field3;
    @FXML
    private TextField power_field3;
    @FXML
    private Button clear_button3;
    @FXML
    private Button playerDelete_button;
    @FXML
    private VBox filterPlayer_vbox;
    @FXML
    private TextField firstName_field4;
    @FXML
    private TextField lastName_field4;
    @FXML
    private ComboBox<String> team_combo4;
    @FXML
    private ComboBox<String> class_combo4;
    @FXML
    private TextField bench_field4;
    @FXML
    private TextField squat_field4;
    @FXML
    private TextField incline_field4;
    @FXML
    private TextField power_field4;
    @FXML
    private Button clear_button4;
    @FXML
    private VBox autogroup_vbox;
    @FXML
    private Spinner<Integer> autogroup_spinner;
    @FXML
    private ListView<Player> autogroup_listview;
    @FXML
    private Button groupGenerate_button;
    @FXML
    private TextField groupSize_field;

    @FXML
    private Label edit_message_label;
    @FXML
    private Label delete_message_label;
    @FXML
    private Label filter_message_label;
    @FXML
    private ComboBox<String> group_TeamFilter_comboBox;
    @FXML
    private Button groupPrint_button;
    @FXML
    private Button filterPrint_button;
    
    /*--------------------------------------------------------------------------------*/
    
    /*
        This method is called after the constructor instantiates all ui components.
    */
        
    @Override
    public void initialize(URL url, ResourceBundle rb) {
        // Classification combo box list
        ObservableList<String> class_options =              
        FXCollections.observableArrayList(
            " ",
            "9",
            "10",
            "11",
            "12"
        );
        class_combo1.getItems().addAll(class_options);
        class_combo1.setValue(" ");
        class_combo2.getItems().addAll(class_options);
        class_combo2.setValue(" ");
        class_combo3.getItems().addAll(class_options);
        class_combo3.setValue(" ");
        class_combo4.getItems().addAll(class_options);
        class_combo4.setValue(" ");
        
        // Team combo box list
        ObservableList<String> team_options = 
        FXCollections.observableArrayList(
            " ",
            "Varsity",
            "Purple",
            "Gold",
            "White"
        );

        team_combo1.getItems().addAll(team_options);
        team_combo1.setValue(" ");
        team_combo2.getItems().addAll(team_options);
        team_combo2.setValue(" ");
        team_combo3.getItems().addAll(team_options);
        team_combo3.setValue(" ");
        team_combo4.getItems().addAll(team_options);
        team_combo4.setValue(" ");
        
        // Group Panel initialization
        groupSize_field.setText("4");
        group_TeamFilter_comboBox.getItems().addAll(team_options);
        group_TeamFilter_comboBox.setValue(" ");
        
        // Message labels
         edit_message_label.setText("To edit a player's information, select the player from the table on left. "
                                  + "To find a student you can scroll through table or you can quickly search for the student "
                                  + "by typing student's information in the textfields to the right (i.e. Last Name). "
                                  + "Once student's info appears in fields to the right you can edit info and then press the "
                                  + "Update button. ");
                                 
         delete_message_label.setText("To delete a player, select the player from the table on left. "
                                  + "To find a student you can scroll through table or you can quickly search for the student "
                                  + "by typing student's information in the textfields to the right (i.e. Last Name). "
                                  + "Once student's info appears in fields to the right press the Delete button.");
         filter_message_label.setText("To filter database fill textfields and combo boxes to the right with desired querying data.");
       
        // Players are viewed in a tableview component (player_table). Below is initialization for this table.
        // Bind Player fields to corresponding table columns
        lastName_col.setCellValueFactory(new PropertyValueFactory<>("lastName"));
        firstName_col.setCellValueFactory(new PropertyValueFactory<>("firstName"));
        team_col.setCellValueFactory(new PropertyValueFactory<>("team"));
        class_col.setCellValueFactory(new PropertyValueFactory<>("classification"));
        bench_col.setCellValueFactory(new PropertyValueFactory<>("benchMax"));
        squat_col.setCellValueFactory(new PropertyValueFactory<>("squatMax"));
        incline_col.setCellValueFactory(new PropertyValueFactory<>("inclineMax"));
        power_col.setCellValueFactory(new PropertyValueFactory<>("powerMax"));
        
        // set column alignment for table
        team_col.setStyle("-fx-alignment: center");
        class_col.setStyle("-fx-alignment: center");
        bench_col.setStyle("-fx-alignment: center");
        squat_col.setStyle("-fx-alignment: center");
        incline_col.setStyle("-fx-alignment: center");
        power_col.setStyle("-fx-alignment: center");
        
        tableData = FXCollections.observableArrayList();  // use factory method to create an ObservableList
        ArrayList<Player> players = maxdb.getPlayers();   // get reference to players database
        tableData.addAll(players);                        // add all players to ObservableList
        player_table.setItems(tableData);                 // set tableData as the ObservableList attached to the table
        
        addTextFieldListeners();                          // create TextField listeners
        createTableSelectionListener();                   // create TableView selection listeners
        addSpinnerListener();                             // create Spinner listener
    }  
    
    /*
        This method is called when a selected player's information has been modified. Recording this change
        in the player's ArrayList (database). This method allows for filtering of the database to quickly retrieve the player 
        to be removed from database.
    */
    
    public void editPlayerUpdate()
    {
        tableData.clear();
        ArrayList<Player> players = maxdb.getPlayers();
        tableData.addAll(players);

        if(!lastName_field2.getText().equals("") && !lastName_field2.getText().equals(" "))
        {
            String name = lastName_field2.getText().trim();
            ArrayList<Player> p = searchByLastName(tableData, name);
            tableData.retainAll(p);
        }
        
        if(!firstName_field2.getText().equals("") && !lastName_field2.getText().equals(" "))
        {
            String name = firstName_field2.getText().trim();
            ArrayList<Player> p = searchByFirstName(tableData, name);
            tableData.retainAll(p);
        }
        
        if(!bench_field2.getText().equals("") && !bench_field2.getText().equals(" "))
        {
            int num = Integer.parseInt(bench_field2.getText().trim());
            ArrayList<Player> p = searchByBenchMax(tableData, num);
            tableData.retainAll(p);
        }
        
        if(!squat_field2.getText().equals("") && !squat_field2.getText().equals(" "))
        {
            int num = Integer.parseInt(squat_field2.getText().trim());
            ArrayList<Player> p = searchBySquatMax(tableData, num);
            tableData.retainAll(p);
        }
        
        if(!incline_field2.getText().equals("") && !incline_field2.getText().equals(" "))
        {
            int num = Integer.parseInt(incline_field2.getText().trim());
            ArrayList<Player> p = searchByInclineMax(tableData, num);
            tableData.retainAll(p);
        }
        
        if(!power_field2.getText().equals("") && !power_field2.getText().equals(" "))
        {
            int num = Integer.parseInt(power_field2.getText().trim());
            ArrayList<Player> p = searchByPowerMax(tableData, num);
            tableData.retainAll(p);
        }
        
        if(!team_combo2.getValue().equals("") && !team_combo2.getValue().equals(" "))
        {
            String name = team_combo2.getValue().trim();
            ArrayList<Player> p = searchByTeam(tableData, name);
            tableData.retainAll(p);
        }
        
        if(!team_combo2.getValue().equals("") && !team_combo2.getValue().equals(" "))
        {
            String name = team_combo2.getValue().trim();
            ArrayList<Player> p = searchByTeam(tableData, name);
            tableData.retainAll(p);
        }
        
        if(!class_combo2.getValue().equals("") && !class_combo2.getValue().equals(" "))
        {
            int num = Integer.parseInt(class_combo2.getValue().trim());
            ArrayList<Player> p = searchByClass(tableData, num);
            tableData.retainAll(p);
        }
        
        player_table.setItems(tableData);
    }
    
    /*
        This method is called when a selected player is removed from the database. Recording this change
        in the player's ArrayList. This method allows for filtering of the database to quickly retrieve the player 
        to be removed from database.
    */  
    public void deletePlayerUpdate()
    {
        tableData.clear();
        ArrayList<Player> players = maxdb.getPlayers();
        tableData.addAll(players);

        if(!lastName_field3.getText().equals("") && !lastName_field3.getText().equals(" "))
        {
            String name = lastName_field3.getText().trim();
            ArrayList<Player> p = searchByLastName(tableData, name);
            tableData.retainAll(p);
        }
        
        if(!firstName_field3.getText().equals("") && !lastName_field3.getText().equals(" "))
        {
            String name = firstName_field3.getText().trim();
            ArrayList<Player> p = searchByFirstName(tableData, name);
            tableData.retainAll(p);
        }
        
        if(!bench_field3.getText().equals("") && !bench_field3.getText().equals(" "))
        {
            int num = Integer.parseInt(bench_field3.getText().trim());
            ArrayList<Player> p = searchByBenchMax(tableData, num);
            tableData.retainAll(p);
        }
        
        if(!squat_field3.getText().equals("") && !squat_field3.getText().equals(" "))
        {
            int num = Integer.parseInt(squat_field3.getText().trim());
            ArrayList<Player> p = searchBySquatMax(tableData, num);
            tableData.retainAll(p);
        }
        
        if(!incline_field3.getText().equals("") && !incline_field3.getText().equals(" "))
        {
            int num = Integer.parseInt(incline_field3.getText().trim());
            ArrayList<Player> p = searchByInclineMax(tableData, num);
            tableData.retainAll(p);
        }
        
        if(!power_field3.getText().equals("") && !power_field3.getText().equals(" "))
        {
            int num = Integer.parseInt(power_field3.getText().trim());
            ArrayList<Player> p = searchByPowerMax(tableData, num);
            tableData.retainAll(p);
        }
        
        if(!team_combo3.getValue().equals("") && !team_combo3.getValue().equals(" "))
        {
            String name = team_combo3.getValue().trim();
            ArrayList<Player> p = searchByTeam(tableData, name);
            tableData.retainAll(p);
        }
        
        if(!team_combo3.getValue().equals("") && !team_combo3.getValue().equals(" "))
        {
            String name = team_combo3.getValue().trim();
            ArrayList<Player> p = searchByTeam(tableData, name);
            tableData.retainAll(p);
        }
        
        if(!class_combo3.getValue().equals("") && !class_combo3.getValue().equals(" "))
        {
            int num = Integer.parseInt(class_combo3.getValue().trim());
            ArrayList<Player> p = searchByClass(tableData, num);
            tableData.retainAll(p);
        }
        
        player_table.setItems(tableData);
    }
    
   /*
        This method allows filtering of the player's list by any field defined in the Player class.
        For example, if the user types an "a" in the lastName TextField component this method 
        will filter the list so that it only contains player's who last name begins with an "a".
        Another example, if the user selects "Varsity" from the Team combo box then this method
        will filter the list so that it only contains player's who are on the "Varsity" team.
    */
    public void filterPlayerUpdate()
    {
        tableData.clear();
        ArrayList<Player> players = maxdb.getPlayers();
        tableData.addAll(players);

        if(!lastName_field4.getText().equals("") && !lastName_field4.getText().equals(" "))
        {
            String name = lastName_field4.getText().trim();
            ArrayList<Player> p = searchByLastName(tableData, name);
            tableData.retainAll(p);
        }
        
        if(!firstName_field4.getText().equals("") && !lastName_field4.getText().equals(" "))
        {
            String name = firstName_field4.getText().trim();
            ArrayList<Player> p = searchByFirstName(tableData, name);
            tableData.retainAll(p);
        }
        
        if(!bench_field4.getText().equals("") && !bench_field4.getText().equals(" "))
        {
            int num = Integer.parseInt(bench_field4.getText().trim());
            ArrayList<Player> p = searchByBenchMax(tableData, num);
            tableData.retainAll(p);
        }
        
        if(!squat_field4.getText().equals("") && !squat_field4.getText().equals(" "))
        {
            int num = Integer.parseInt(squat_field4.getText().trim());
            ArrayList<Player> p = searchBySquatMax(tableData, num);
            tableData.retainAll(p);
        }
        
        if(!incline_field4.getText().equals("") && !incline_field4.getText().equals(" "))
        {
            int num = Integer.parseInt(incline_field4.getText().trim());
            ArrayList<Player> p = searchByInclineMax(tableData, num);
            tableData.retainAll(p);
        }
        
        if(!power_field4.getText().equals("") && !power_field4.getText().equals(" "))
        {
            int num = Integer.parseInt(power_field4.getText().trim());
            ArrayList<Player> p = searchByPowerMax(tableData, num);
            tableData.retainAll(p);
        }
        
        if(!team_combo4.getValue().equals("") && !team_combo4.getValue().equals(" "))
        {
            String name = team_combo4.getValue().trim();
            ArrayList<Player> p = searchByTeam(tableData, name);
            tableData.retainAll(p);
        }
        
        if(!team_combo4.getValue().equals("") && !team_combo4.getValue().equals(" "))
        {
            String name = team_combo4.getValue().trim();
            ArrayList<Player> p = searchByTeam(tableData, name);
            tableData.retainAll(p);
        }
        
        if(!class_combo4.getValue().equals("") && !class_combo4.getValue().equals(" "))
        {
            int num = Integer.parseInt(class_combo4.getValue().trim());
            ArrayList<Player> p = searchByClass(tableData, num);
            tableData.retainAll(p);
        }
        
        player_table.setItems(tableData);
}
    /*
        Registers a ChangeListener for all TextField components visible in the three
           panels: EditPanel, DeletePanel, and FilterPanel.
    */
    
    public void addTextFieldListeners()
    {       
        listener2 = new ChangeListener<String>() {
            @Override
            public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
                if(!newValue.equals(oldValue)) 
                {
                    editPlayerUpdate();
                }
            }
        };
        
        lastName_field2.textProperty().addListener(listener2);
        firstName_field2.textProperty().addListener(listener2);
        bench_field2.textProperty().addListener(listener2);
        squat_field2.textProperty().addListener(listener2);
        incline_field2.textProperty().addListener(listener2);
        power_field2.textProperty().addListener(listener2);
        team_combo2.valueProperty().addListener(listener2);
        class_combo2.valueProperty().addListener(listener2);
        
        listener3 = new ChangeListener<String>() {
            @Override
            public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
                if(!newValue.equals(oldValue)) 
                {
                    deletePlayerUpdate();
                }
            }
        };
        
        lastName_field3.textProperty().addListener(listener3);
        firstName_field3.textProperty().addListener(listener3);
        bench_field3.textProperty().addListener(listener3);
        squat_field3.textProperty().addListener(listener3);
        incline_field3.textProperty().addListener(listener3);
        power_field3.textProperty().addListener(listener3);
        team_combo3.valueProperty().addListener(listener3);
        class_combo3.valueProperty().addListener(listener3);
              
        listener4 = new ChangeListener<String>() {
            @Override
            public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
                if(!newValue.equals(oldValue)) 
                {
                    filterPlayerUpdate();
                }
            }
        };
        
        lastName_field4.textProperty().addListener(listener4);
        firstName_field4.textProperty().addListener(listener4);
        bench_field4.textProperty().addListener(listener4);
        squat_field4.textProperty().addListener(listener4);
        incline_field4.textProperty().addListener(listener4);
        power_field4.textProperty().addListener(listener4);
        team_combo4.valueProperty().addListener(listener4);
        class_combo4.valueProperty().addListener(listener4); 
        
        group_listener = new ChangeListener<String>() {
            @Override
            public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
                if(!newValue.equals(oldValue)) 
                {
                    tableData.clear();
                    ArrayList<Player> players = maxdb.getPlayers();
                    tableData.addAll(players);
                    if(!group_TeamFilter_comboBox.getValue().equals("") && !group_TeamFilter_comboBox.getValue().equals(" "))
                    {
                        String name = group_TeamFilter_comboBox.getValue().trim();
                        filteredTeamList = searchByTeam(tableData, name);
                        tableData.retainAll(filteredTeamList);
                    }
                    else
                    {
                        filteredTeamList = maxdb.getPlayers();
                        autogroup_listview.setItems(null);
                        SpinnerValueFactory<Integer> valueFactory = 
                            new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 0, 0);
                        autogroup_spinner.setValueFactory(valueFactory);
                    }
                }
            }
        };
        group_TeamFilter_comboBox.valueProperty().addListener(group_listener);
    }
    
    /*
        Removes ChangeListener from all TextField components in the three
           panels: EditPanel, DeletePanel, and FilterPanel. This method is
           called when a user selects a player from the table so there is
           no attempt of any of the textfields to listener for a change while
           the selected player's info is displayed in these textfields.
    */
    public void removeTextFieldListeners()
    {     
        lastName_field2.textProperty().removeListener(listener2);
        firstName_field2.textProperty().removeListener(listener2);
        bench_field2.textProperty().removeListener(listener2);
        squat_field2.textProperty().removeListener(listener2);
        incline_field2.textProperty().removeListener(listener2);
        power_field2.textProperty().removeListener(listener2);
        team_combo2.valueProperty().removeListener(listener2);
        class_combo2.valueProperty().removeListener(listener2);
        
        lastName_field3.textProperty().removeListener(listener3);
        firstName_field3.textProperty().removeListener(listener3);
        bench_field3.textProperty().removeListener(listener3);
        squat_field3.textProperty().removeListener(listener3);
        incline_field3.textProperty().removeListener(listener3);
        power_field3.textProperty().removeListener(listener3);
        team_combo3.valueProperty().removeListener(listener3);
        class_combo3.valueProperty().removeListener(listener3);
        
        lastName_field4.textProperty().removeListener(listener4);
        firstName_field4.textProperty().removeListener(listener4);
        bench_field4.textProperty().removeListener(listener4);
        squat_field4.textProperty().removeListener(listener4);
        incline_field4.textProperty().removeListener(listener4);
        power_field4.textProperty().removeListener(listener4);
        team_combo4.valueProperty().removeListener(listener4);
        class_combo4.valueProperty().removeListener(listener4);
    }
    
    /*
        Registers a Selection listener for the player_table so that when a player
        has been selected from the table the program can respond to this event.
    */
    
    public void createTableSelectionListener()
    {
        player_table.getSelectionModel().selectedItemProperty().addListener((observe, oldSelection, newSelection) -> {
            if (newSelection != null) {
                this.removeTextFieldListeners();
                Player player = player_table.getSelectionModel().getSelectedItem();
                
                
                if(editPlayer_vbox.isVisible())
                {
                    firstName_field2.setText(player.getFirstName());
                    lastName_field2.setText(player.getLastName());
                    team_combo2.setValue(player.getTeam());
                    class_combo2.setValue("" + player.getClassification());
                    bench_field2.setText("" + player.getBenchMax());
                    squat_field2.setText("" + player.getSquatMax());
                    incline_field2.setText("" + player.getInclineMax());
                    power_field2.setText("" + player.getPowerMax());
                }
                if(deletePlayer_vbox.isVisible())
                {
                    firstName_field3.setText(player.getFirstName());
                    lastName_field3.setText(player.getLastName());
                    team_combo3.setValue(player.getTeam());
                    class_combo3.setValue("" + player.getClassification());
                    bench_field3.setText("" + player.getBenchMax());
                    squat_field3.setText("" + player.getSquatMax());
                    incline_field3.setText("" + player.getInclineMax());
                    power_field3.setText("" + player.getPowerMax());
                }
                
            }
        });
    }
    
    /*
        Registers a ChangeListener for the Spinner component in the Group Panel.
        The Spinner component is used to navigate through the list of workout groups
        allowing only one group to be viewed at a time.
    */
    
    public void addSpinnerListener()
    {
        spinner_listener = new ChangeListener<Integer>() {
            @Override
            public void changed(ObservableValue<? extends Integer> observable, Integer oldValue, Integer newValue) {
                if(!newValue.equals(oldValue)) 
                {
                    if(autogroup_spinner.getValue() > 0)
                    {
                        ArrayList<Group> groups = maxdb.getGroups();
                        ObservableList group = FXCollections.observableArrayList();
                        Player[] players = groups.get(autogroup_spinner.getValue() - 1).getGroup();
                        for(int i = 0; i < players.length; i++)
                            if(players[i] != null)
                                group.add(players[i].getTeam() + "    " + players[i].getFirstName() + " " + players[i].getLastName());

                        autogroup_listview.setItems(group);
                    }
                }
            }
        };
        
        autogroup_spinner.valueProperty().addListener(spinner_listener);
    }
    
    /*
        This method creates a OnCloseListener for the'X' icon in the top right corner of the window
        so that the program can reponsed to the user clicking on this icon to close the program.
    */
    
    public void createOnCloseListener(Stage stage)  {
        stage.getScene().getWindow().addEventFilter(WindowEvent.WINDOW_CLOSE_REQUEST, this::closeWindowEvent);
    }
    
    /*
        This method is called when a onCloseWindow event has occurred allowing the program to check to see
        if the database needs to be saved to the data file before terminating.
    */
    private void closeWindowEvent(WindowEvent event) {
        if(modified == true)   // has data changed?
        {  
            Alert alert = new Alert(AlertType.CONFIRMATION, "Would you like to save changes?", ButtonType.YES, ButtonType.NO, ButtonType.CANCEL);
            alert.setTitle("Quit application");
            alert.showAndWait();

            if (alert.getResult() == ButtonType.YES)
            {
                maxdb.saveFile(MaxDatabase.FILENAME);
                System.exit(0);
            }
            if (alert.getResult() == ButtonType.NO)
            {
                System.exit(0);
            }
        }
        else
        {
            System.exit(0);
        }               
    }
    
    /*
        This method is called to handle any menuItem events.
    */

    @FXML
    private void handlerMenuItems(ActionEvent event) {
        Object source = event.getSource();
        
        if(source == new_menu)
        {
            Alert alert = new Alert(AlertType.CONFIRMATION, "This will erase all data from database. Would you like to continue?", ButtonType.YES, ButtonType.CANCEL);
            alert.setTitle("Create New Database");
            alert.showAndWait();

            if (alert.getResult() == ButtonType.YES)
            {
                maxdb.newFile(MaxDatabase.FILENAME);
                resetTableView();
            }
        }
        if(source == save_menu)
        {
            maxdb.saveFile(MaxDatabase.FILENAME);
            modified = false;
        }
        if(source == closeout_menu)
        {
            maxdb.closeOutYear();
            modified = true;
            resetTableView();
        }

        if(source == exit_menu)
        {
            if(modified == true)
            {
                Alert alert = new Alert(AlertType.CONFIRMATION, "Would you like to save changes?", ButtonType.YES, ButtonType.NO, ButtonType.CANCEL);
                alert.setTitle("Quit application");
                alert.showAndWait();

                if (alert.getResult() == ButtonType.YES)
                {
                    maxdb.saveFile(MaxDatabase.FILENAME);
                    System.exit(0);
                }
                if (alert.getResult() == ButtonType.NO)
                {
                    System.exit(0);
                }
            }
            else
            {
                System.exit(0);
            }      
        }
        if(source == addPlayer_menu)
        {
            addPlayer_vbox.setVisible(true);
            editPlayer_vbox.setVisible(false);
            deletePlayer_vbox.setVisible(false);
            filterPlayer_vbox.setVisible(false);
            autogroup_vbox.setVisible(false);
        }
        
        if(source == editPlayer_menu)
        {
            addPlayer_vbox.setVisible(false);
            editPlayer_vbox.setVisible(true);
            deletePlayer_vbox.setVisible(false);
            filterPlayer_vbox.setVisible(false);
            autogroup_vbox.setVisible(false);
        }
        
        if(source == deletePlayer_menu)
        {
            addPlayer_vbox.setVisible(false);
            editPlayer_vbox.setVisible(false);
            deletePlayer_vbox.setVisible(true);
            filterPlayer_vbox.setVisible(false);
            autogroup_vbox.setVisible(false);
        }
        
        if(source == filterPlayers_menu)
        {
            addPlayer_vbox.setVisible(false);
            editPlayer_vbox.setVisible(false);
            deletePlayer_vbox.setVisible(false);
            filterPlayer_vbox.setVisible(true);
            autogroup_vbox.setVisible(false);
        }
        
        if(source == autoGenerateGroups_menu)
        {
            addPlayer_vbox.setVisible(false);
            editPlayer_vbox.setVisible(false);
            deletePlayer_vbox.setVisible(false);
            filterPlayer_vbox.setVisible(false);
            autogroup_vbox.setVisible(true); 
        }
    }
    
    /*
        This method is called to handle any Button press events.
    */

    @FXML
    private void handleButtonAction(ActionEvent event) {
        Object source = event.getSource();
        if(source == playerAdd_button)
        {
            String lastName = lastName_field1.getText().trim();
            String firstName = firstName_field1.getText().trim();
            String team = team_combo1.getValue();
            int classification = 0;
            int bench = 0;
            int squat = 0;
            int incline = 0;
            int power = 0;
            
            try
            {
                classification = Integer.parseInt(class_combo1.getValue());
                bench = Integer.parseInt(bench_field1.getText().trim());
                squat = Integer.parseInt(squat_field1.getText().trim());
                incline = Integer.parseInt(incline_field1.getText().trim());
                power = Integer.parseInt(power_field1.getText().trim());
            }
            catch(Exception e)
            { 
                System.out.println("Error using parseInt on data retrieved from AddPlayer");
            }
                
            tableData = FXCollections.observableArrayList();
            Player player = new Player(lastName, firstName, team, classification, bench, squat, incline, power);
            tableData.add(player);
            player_table.getItems().add(player);
            maxdb.addPlayer(player);  // add player to database
            
            lastName_field1.clear();
            firstName_field1.clear();
            team_combo1.setValue(" ");
            class_combo1.setValue(" ");
            bench_field1.clear();
            squat_field1.clear();
            incline_field1.clear();
            power_field1.clear();
            
            modified = true;  // update data file
            
            resetTableView();
        }
        if(source == update_button)
        {
            String firstName = firstName_field2.getText().trim();
            String lastName = lastName_field2.getText().trim();
            String team = team_combo2.getValue();
            int classification = 0;
            int bench = 0;
            int squat = 0;
            int incline = 0;
            int power = 0;
            
            try
            {
                classification = Integer.parseInt(class_combo2.getValue());
                bench = Integer.parseInt(bench_field2.getText().trim());
                squat = Integer.parseInt(squat_field2.getText().trim());
                incline = Integer.parseInt(incline_field2.getText().trim());
                power = Integer.parseInt(power_field2.getText().trim());
            }
            catch(Exception e)
            { 
                System.out.println("Error using parseInt on data retrieved from AddPlayer");
            }
            
            tableData.clear();    
            tableData = FXCollections.observableArrayList();
            Player player = new Player(lastName, firstName, team, classification, bench, squat, incline, power);
            tableData.add(player);
            player_table.getItems().add(player);
            maxdb.updatePlayer(player);  // add player to database
            
            lastName_field2.clear();
            firstName_field2.clear();
            team_combo2.setValue(" ");
            class_combo2.setValue(" ");
            bench_field2.clear();
            squat_field2.clear();
            incline_field2.clear();
            power_field2.clear();
            
            modified = true;  // update data file
            
            resetTableView();
            this.addTextFieldListeners();
        }

        if(source == playerDelete_button)
        {
            Player selectedPlayer = player_table.getSelectionModel().getSelectedItem();
            
            if(selectedPlayer != null)
            {
                if(selectedPlayer.getLastName().equals("") || selectedPlayer.getLastName().equals(" "))
                {
                    Alert alert = new Alert(AlertType.NONE, "Player not selected", ButtonType.CLOSE);
                    alert.setTitle("Delete Record");
                    alert.showAndWait();
                }
                else
                {
                    Alert alert = new Alert(AlertType.WARNING, "Delete selected player?", ButtonType.YES, ButtonType.NO);
                    alert.setTitle("Delete Record");
                    alert.showAndWait();

                    if (alert.getResult() == ButtonType.YES)
                    {
                        player_table.getItems().remove(selectedPlayer);
                        maxdb.deletePlayer(selectedPlayer);
                        modified = true;

                        lastName_field3.clear();
                        firstName_field3.clear();
                        team_combo3.setValue(" ");
                        class_combo3.setValue(" ");
                        bench_field3.clear();
                        squat_field3.clear();
                        incline_field3.clear();
                        power_field3.clear();
                    } 

                    resetTableView();
                }
                this.addTextFieldListeners();
            }
            else
            {
                Alert alert = new Alert(AlertType.INFORMATION, "Player not selected", ButtonType.OK);
                alert.setTitle("Select Player");
                alert.showAndWait();
            }
        }
        
        if(source == clear_button1)
        {
            lastName_field1.clear();
            firstName_field1.clear();
            team_combo1.setValue(" ");
            class_combo1.setValue(" ");
            bench_field1.clear();
            squat_field1.clear();
            incline_field1.clear();
            power_field1.clear();
            
            resetTableView();
        }
        
        if(source == clear_button2)
        {
            lastName_field2.clear();
            firstName_field2.clear();
            team_combo2.setValue(" ");
            class_combo2.setValue(" ");
            bench_field2.clear();
            squat_field2.clear();
            incline_field2.clear();
            power_field2.clear();
            
            resetTableView();
        }
        
        if(source == clear_button3)
        {
            lastName_field3.clear();
            firstName_field3.clear();
            team_combo3.setValue(" ");
            class_combo3.setValue(" ");
            bench_field3.clear();
            squat_field3.clear();
            incline_field3.clear();
            power_field3.clear();
            
            resetTableView();
        }
        
        if(source == clear_button4)
        {
            lastName_field4.clear();
            firstName_field4.clear();
            team_combo4.setValue(" ");
            class_combo4.setValue(" ");
            bench_field4.clear();
            squat_field4.clear();
            incline_field4.clear();
            power_field4.clear();
            
            resetTableView();
        }
        
        // Group AutoGenerate Button
        if(source == groupGenerate_button)
        {
            tableData.clear();
            
            if(groups != null)
                groups.clear();
            
            int groupSize = Integer.parseInt(this.groupSize_field.getText());
            maxdb.createGroups(filteredTeamList, groupSize);
            tableData = FXCollections.observableArrayList();
            groups = maxdb.getGroups();
            tableData.addAll(maxdb.getGroupsAsList());
            player_table.setItems(tableData);
            
            populateGroupListView();
        }     
        if(source == groupPrint_button)
        {
            PrintGroups pg = new PrintGroups(groups);
        }
        
        if(source == filterPrint_button)
        {
            System.out.println("Print Filter");
            PrintFilters pf = new PrintFilters(tableData);
        }
    }
    
    /*
        This method displays a single group within the group_listview component.
    */
    
    public void populateGroupListView()
    {
        if(groups != null)
        {
            SpinnerValueFactory<Integer> valueFactory = 
                     new SpinnerValueFactory.IntegerSpinnerValueFactory(1, groups.size(), 1);
            autogroup_spinner.setValueFactory(valueFactory);

            ObservableList group = FXCollections.observableArrayList();
            Player[] players = groups.get(0).getGroup();
            for(int i = 0; i < players.length; i++)
            {
                if(players[i] != null)
                    group.add(players[i].getTeam() + "   " + players[i].getFirstName() + " " + players[i].getLastName());
            }
            autogroup_listview.setItems(group);
        }
    }
    
    /*
        This method erases and re-populates the player_table with all players in the players database.
    */
    public void resetTableView()
    {
        tableData.clear();
        ArrayList<Player> players = maxdb.getPlayers();
        tableData.addAll(players);
        player_table.setItems(tableData);
    }
    
    /*
       @return an ArrayList of Players who meet the given last name from the current list
        of filtered players. A player is added to the sublist if the player's last name matches any part 
        of the lettering sequence. For example, if the parameter name contains the string "Ba",
        then all players whose name start with "Ba" will be added to the list.
    */
    public ArrayList<Player> searchByLastName(ObservableList<Player> filteredList, String name)
    {
       ArrayList<Player> list = new ArrayList<>();
       for(Player p : filteredList)
       {
           if(p.getLastName().matches(name + ".*"))
           {
               list.add(p);
           }
       }
       return list;
    }
    
    /*
       @return an ArrayList of Players who meet the given first name from the current list
        of filtered players. A player is added to the sublist if the player's first name matches any part 
        of the lettering sequence. For example, if the parameter name contains the string "Ba",
        then all players whose name start with "Ba" will be added to the list.
    */
    public ArrayList<Player> searchByFirstName(ObservableList<Player> filteredList, String name)
    {
       ArrayList<Player> list = new ArrayList<>();
       for(Player p : filteredList)
       {
           if(p.getFirstName().matches(name + ".*"))
               list.add(p);
       }
       return list;
    }
    
    /*
       @return an ArrayList of Players who meet the given team name from the current list
        of filtered players. 
    */
    public ArrayList<Player> searchByTeam(ObservableList<Player> filteredList, String name)
    {
       ArrayList<Player> list = new ArrayList<>();
       if(name.equals(" "))
           name = "";
       for(Player p : filteredList)
       {
           if(p.getTeam().matches(name + ".*"))
               list.add(p);
       }
       return list;
    }
    
    /*
       @return an ArrayList of Players who meet the given classification level (9,10,11,12)
        from the current list of filtered players. 
    */
    public ArrayList<Player> searchByClass(ObservableList<Player> filteredList, int level)
    {
       ArrayList<Player> list = new ArrayList<>();
       for(Player p : filteredList)
       {   
            String max_string="";
            if(level != -1)
                max_string = new Integer(level).toString();
            
            String playerMax_string = new Integer(p.getClassification()).toString();
            if(playerMax_string.matches(max_string + ".*"))
               list.add(p);
       }
       return list;
    }
    
    /*
       @return an ArrayList of Players who have a bench press max that matches the value of the max parameter
        from the current list of filtered players. 
    */
    public ArrayList<Player> searchByBenchMax(ObservableList<Player> filteredList, int max)
    {
       ArrayList<Player> list = new ArrayList<>();
       for(Player p : filteredList)
       {   
            String max_string="";
            if(max != -1)
                max_string = new Integer(max).toString();
            String playerMax_string = new Integer(p.getBenchMax()).toString();
            if(playerMax_string.matches(max_string + ".*"))
               list.add(p);
       }
       return list;
    }
    
   /*
       @return an ArrayList of Players who have a squat max that matches the value of the max parameter
        from the current list of filtered players. 
    */
    public ArrayList<Player> searchBySquatMax(ObservableList<Player> filteredList, int max)
    {
      ArrayList<Player> list = new ArrayList<>();
       for(Player p : filteredList)
       {   
            String max_string="";
            if(max != -1)
                max_string = new Integer(max).toString();
            String playerMax_string = new Integer(p.getSquatMax()).toString();
            if(playerMax_string.matches(max_string + ".*"))
               list.add(p);
       }
       return list;
    }
    
    /*
       @return an ArrayList of Players who have a incline max that matches the value of the max parameter
        from the current list of filtered players. 
    */
    public ArrayList<Player> searchByInclineMax(ObservableList<Player> filteredList, int max)
    {
      ArrayList<Player> list = new ArrayList<>();
       for(Player p : filteredList)
       {   
            String max_string="";
            if(max != -1)
                max_string = new Integer(max).toString();
            String playerMax_string = new Integer(p.getInclineMax()).toString();
            if(playerMax_string.matches(max_string + ".*"))
               list.add(p);
       }
       return list;
    }
    
    /*
       @return an ArrayList of Players who have a power clean max that matches the value of the max parameter
        from the current list of filtered players. 
    */ 
    public ArrayList<Player> searchByPowerMax(ObservableList<Player> filteredList, int max)
    {
       ArrayList<Player> list = new ArrayList<>();
       for(Player p : filteredList)
       {   
            String max_string="";
            if(max != -1)
                max_string = new Integer(max).toString();
            String playerMax_string = new Integer(p.getPowerMax()).toString();
            if(playerMax_string.matches(max_string + ".*"))
               list.add(p);
       }
       return list;
    }
}
